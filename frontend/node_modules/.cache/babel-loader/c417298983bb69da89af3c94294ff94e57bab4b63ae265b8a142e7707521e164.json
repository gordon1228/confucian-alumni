{"ast":null,"code":"// src/utils/formatters.js\nexport const formatDate = (dateString, locale = 'zh-CN') => {\n  const date = new Date(dateString);\n  return date.toLocaleDateString(locale, {\n    year: 'numeric',\n    month: 'long',\n    day: 'numeric'\n  });\n};\nexport const formatDateTime = (dateString, locale = 'zh-CN') => {\n  const date = new Date(dateString);\n  return date.toLocaleString(locale, {\n    year: 'numeric',\n    month: 'long',\n    day: 'numeric',\n    hour: '2-digit',\n    minute: '2-digit'\n  });\n};\nexport const formatPhone = phone => {\n  if (!phone) return '';\n  // Format Malaysian phone numbers\n  const cleaned = phone.replace(/\\D/g, '');\n  if (cleaned.startsWith('60')) {\n    return `+${cleaned.slice(0, 2)} ${cleaned.slice(2, 3)}-${cleaned.slice(3)}`;\n  }\n  return phone;\n};\nexport const truncateText = (text, maxLength = 100) => {\n  if (text.length <= maxLength) return text;\n  return text.substring(0, maxLength).trim() + '...';\n};\nexport const slugify = text => {\n  return text.toLowerCase().replace(/[^\\w\\s-]/g, '').replace(/[\\s_-]+/g, '-').replace(/^-+|-+$/g, '');\n};","map":{"version":3,"names":["formatDate","dateString","locale","date","Date","toLocaleDateString","year","month","day","formatDateTime","toLocaleString","hour","minute","formatPhone","phone","cleaned","replace","startsWith","slice","truncateText","text","maxLength","length","substring","trim","slugify","toLowerCase"],"sources":["C:/Users/User/Desktop/confucian-alumni/frontend/src/utils/formatters.js"],"sourcesContent":["// src/utils/formatters.js\r\nexport const formatDate = (dateString, locale = 'zh-CN') => {\r\n  const date = new Date(dateString);\r\n  return date.toLocaleDateString(locale, {\r\n    year: 'numeric',\r\n    month: 'long',\r\n    day: 'numeric'\r\n  });\r\n};\r\n\r\nexport const formatDateTime = (dateString, locale = 'zh-CN') => {\r\n  const date = new Date(dateString);\r\n  return date.toLocaleString(locale, {\r\n    year: 'numeric',\r\n    month: 'long',\r\n    day: 'numeric',\r\n    hour: '2-digit',\r\n    minute: '2-digit'\r\n  });\r\n};\r\n\r\nexport const formatPhone = (phone) => {\r\n  if (!phone) return '';\r\n  // Format Malaysian phone numbers\r\n  const cleaned = phone.replace(/\\D/g, '');\r\n  if (cleaned.startsWith('60')) {\r\n    return `+${cleaned.slice(0, 2)} ${cleaned.slice(2, 3)}-${cleaned.slice(3)}`;\r\n  }\r\n  return phone;\r\n};\r\n\r\nexport const truncateText = (text, maxLength = 100) => {\r\n  if (text.length <= maxLength) return text;\r\n  return text.substring(0, maxLength).trim() + '...';\r\n};\r\n\r\nexport const slugify = (text) => {\r\n  return text\r\n    .toLowerCase()\r\n    .replace(/[^\\w\\s-]/g, '')\r\n    .replace(/[\\s_-]+/g, '-')\r\n    .replace(/^-+|-+$/g, '');\r\n};"],"mappings":"AAAA;AACA,OAAO,MAAMA,UAAU,GAAGA,CAACC,UAAU,EAAEC,MAAM,GAAG,OAAO,KAAK;EAC1D,MAAMC,IAAI,GAAG,IAAIC,IAAI,CAACH,UAAU,CAAC;EACjC,OAAOE,IAAI,CAACE,kBAAkB,CAACH,MAAM,EAAE;IACrCI,IAAI,EAAE,SAAS;IACfC,KAAK,EAAE,MAAM;IACbC,GAAG,EAAE;EACP,CAAC,CAAC;AACJ,CAAC;AAED,OAAO,MAAMC,cAAc,GAAGA,CAACR,UAAU,EAAEC,MAAM,GAAG,OAAO,KAAK;EAC9D,MAAMC,IAAI,GAAG,IAAIC,IAAI,CAACH,UAAU,CAAC;EACjC,OAAOE,IAAI,CAACO,cAAc,CAACR,MAAM,EAAE;IACjCI,IAAI,EAAE,SAAS;IACfC,KAAK,EAAE,MAAM;IACbC,GAAG,EAAE,SAAS;IACdG,IAAI,EAAE,SAAS;IACfC,MAAM,EAAE;EACV,CAAC,CAAC;AACJ,CAAC;AAED,OAAO,MAAMC,WAAW,GAAIC,KAAK,IAAK;EACpC,IAAI,CAACA,KAAK,EAAE,OAAO,EAAE;EACrB;EACA,MAAMC,OAAO,GAAGD,KAAK,CAACE,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC;EACxC,IAAID,OAAO,CAACE,UAAU,CAAC,IAAI,CAAC,EAAE;IAC5B,OAAO,IAAIF,OAAO,CAACG,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,IAAIH,OAAO,CAACG,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,IAAIH,OAAO,CAACG,KAAK,CAAC,CAAC,CAAC,EAAE;EAC7E;EACA,OAAOJ,KAAK;AACd,CAAC;AAED,OAAO,MAAMK,YAAY,GAAGA,CAACC,IAAI,EAAEC,SAAS,GAAG,GAAG,KAAK;EACrD,IAAID,IAAI,CAACE,MAAM,IAAID,SAAS,EAAE,OAAOD,IAAI;EACzC,OAAOA,IAAI,CAACG,SAAS,CAAC,CAAC,EAAEF,SAAS,CAAC,CAACG,IAAI,CAAC,CAAC,GAAG,KAAK;AACpD,CAAC;AAED,OAAO,MAAMC,OAAO,GAAIL,IAAI,IAAK;EAC/B,OAAOA,IAAI,CACRM,WAAW,CAAC,CAAC,CACbV,OAAO,CAAC,WAAW,EAAE,EAAE,CAAC,CACxBA,OAAO,CAAC,UAAU,EAAE,GAAG,CAAC,CACxBA,OAAO,CAAC,UAAU,EAAE,EAAE,CAAC;AAC5B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}